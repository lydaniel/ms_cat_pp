;-- load libraries
(load "lib.church") 

;-- inputs
(define input_list (regexp-split argstring "|"))
(define i_cat_a    (map (lambda (x) (map (lambda (y) (string_to_number y)) 
                                         (regexp-split x ",")))
                        (regexp-split (first input_list) ";")))
(define i_cat_b    (map (lambda (x) (map (lambda (y) (string_to_number y)) 
                                         (regexp-split x ",")))
                        (regexp-split (second input_list) ";")))
(define i_t_stim   (map (lambda (x) (map (lambda (y) (string_to_number y)) 
                                         (regexp-split x ",")))
                        (regexp-split (third input_list) ";")))

;-- core
(define categorization
    (mem (lambda (stimulus cat_a cat_b w)
        (define (evi_s s1 s2 w) (apply * (map (lambda (x y z) 
                                                      (if (eq? x y) 1 z)) 
                                              s1 s2 w)))

        (define p_evi_a (sum (map (lambda (a) (evi_s stimulus a w)) cat_a)))
        (define p_evi_b (sum (map (lambda (b) (evi_s stimulus b w)) cat_b)))

        (list (list 0 1)
              (list (/ p_evi_a (+ p_evi_a p_evi_b))
                    (/ p_evi_b (+ p_evi_a p_evi_b)))))))


(define (learn cat_a cat_b)
    (mh-query samples mh_lag
        (define test_w (repeat 4 (lambda () (uniform 0 1))))

        (define test_cat_p_a (map (lambda (x) (categorization x cat_a cat_b test_w)) cat_a))
        (define test_cat_p_b (map (lambda (x) (categorization x cat_a cat_b test_w)) cat_b))

        (define cat_a_factor (sum (map (lambda (x) (log (first (second x)))) test_cat_p_a))) 
        (define cat_b_factor (sum (map (lambda (x) (log (second (second x)))) test_cat_p_b)))

        test_w

        (factor (+ cat_a_factor cat_b_factor))))

(define sample_w (learn i_cat_a i_cat_b))

;(define sample_w (repeat samples (lambda () (repeat 4 (lambda() (uniform 0 1))))))

(define (stim_dist w)
    (map (lambda (x) (first (second (categorization x i_cat_a i_cat_b w))))
         (append i_cat_a i_cat_b i_t_stim)))

(define cat_dist (map stim_dist sample_w))

(define mean_cat_dist (v_div (fold v_add 
                             (first cat_dist) (rest cat_dist)) 
                      (length cat_dist)))

mean_cat_dist

