;-- load libraries
(load "lib.church")

;-- inputs
(define input_list (regexp-split argstring "|"))
(define i_cat_a    (map (lambda (x) (map (lambda (y) (string_to_number y)) 
                                         (regexp-split x ",")))
                        (regexp-split (first input_list) ";")))
(define i_cat_b    (map (lambda (x) (map (lambda (y) (string_to_number y)) 
                                         (regexp-split x ",")))
                        (regexp-split (second input_list) ";")))
(define i_t_stim   (map (lambda (x) (map (lambda (y) (string_to_number y)) 
                                         (regexp-split x ",")))
                        (regexp-split (third input_list) ";")))

;-- core
(define proto_a '(1 1 1 1))
(define proto_b '(0 0 0 0))

(define flip_cat
    (mem (lambda (cat)
        (map (lambda (c) (v_sub (make_list (length c) 1) c)) cat))))

(define dim_info
    (mem (lambda (stim cat_a cat_b)
        (define dim_info_a_p (fold v_add (first cat_a) (rest cat_a)))
        (define dim_info_b_p (fold v_add (first cat_b) (rest cat_b)))

        (define dim_info_a_n (fold v_add (first (flip_cat cat_a)) 
                                         (rest (flip_cat cat_a))))
        (define dim_info_b_n (fold v_add (first (flip_cat cat_b)) 
                                         (rest (flip_cat cat_b))))

        (define dim_info_p_sum (v_add dim_info_a_p dim_info_b_p))
        (define dim_info_n_sum (v_add dim_info_a_n dim_info_b_n))

        (define dim_info_a (map (lambda (x yp yn zp zn) 
                                    (if (eq? x 1) (/ yp zp) (/ yn zn))) 
                                 stim dim_info_a_p dim_info_a_n dim_info_p_sum dim_info_n_sum))
        (define dim_info_b (map (lambda (x yp yn zp zn) 
                                    (if (eq? x 1) (/ yp zp) (/ yn zn))) 
                                 stim dim_info_b_p dim_info_b_n dim_info_p_sum dim_info_n_sum)) 

        (v_sub dim_info_a dim_info_b))))

(define categorization_training
    (mem (lambda (stimulus w a b cat_a cat_b)
        (define di (dim_info stimulus cat_a cat_b))
        (define (evi_s w d) (sum (v_mul w d)))
        (define p_evi_a (evi_s w di))

        (list (list 0 1)
              (list (/ 1 (+ 1 (exp (* -1 (* a (+ p_evi_a b))))))
                    (/ 1 (+ 1 (exp (* a (+ p_evi_a b))))))))))

(define categorization_transfer
    (mem (lambda (stimulus w a cat_a cat_b)
        (define di (dim_info stimulus cat_a cat_b))
        (define (evi_s w d) (sum (v_mul w d)))
        (define p_evi_a (evi_s w di))

        (list (list 0 1)
              (list (/ 1 (+ 1 (exp (* -1 (* a p_evi_a)))))
                    (/ 1 (+ 1 (exp (* a p_evi_a)))))))))

(define (learn cat_a cat_b)
    (mh-query samples mh_lag
        (define test_w (repeat 4 (lambda () (uniform 0 1))))
        (define test_a (uniform 0 5))
        (define test_b (uniform -1 1))

        (define test_cat_p_a (map (lambda (x) (categorization_training x test_w test_a test_b cat_a cat_b)) cat_a))
        (define test_cat_p_b (map (lambda (x) (categorization_training x test_w test_a test_b cat_a cat_b)) cat_b))

        (define cat_a_factor (sum (map (lambda (x) (log (first (second x)))) test_cat_p_a))) 
        (define cat_b_factor (sum (map (lambda (x) (log (second (second x)))) test_cat_p_b)))

        (list test_w test_a test_b)

        (factor (+ cat_a_factor cat_b_factor))))

(define sample_params (learn i_cat_a i_cat_b))

;(define sample_params (repeat samples (lambda () (list 
;                                                     (repeat 4 (lambda() (uniform 0 1)))
;                                                     (uniform 0 5)
;                                                     (uniform -1 1)))))

(define (stim_dist_training w)
    (map (lambda (x) (first (second (categorization_training x (first w) (second w) (third w) i_cat_a i_cat_b))))
        (append i_cat_a i_cat_b)))

(define (stim_dist_transfer w)
    (map (lambda (x) (first (second (categorization_transfer x (first w) (second w) i_cat_a i_cat_b))))
        i_t_stim))

(define (stim_dist w) (append (stim_dist_training w) (stim_dist_transfer w)))

(define cat_dist (map stim_dist sample_params))

(define mean_cat_dist (v_div (fold v_add 
                             (first cat_dist) (rest cat_dist)) 
                      (length cat_dist)))

mean_cat_dist


